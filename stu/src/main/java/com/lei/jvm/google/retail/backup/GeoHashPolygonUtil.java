package com.lei.jvm.google.retail.backup;

import java.util.HashSet;
import java.util.Set;

public class GeoHashPolygonUtil {
    
    // Base32字符集用于Geohash编码
    private static final char[] BASE32 = {
        '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 
        'b', 'c', 'd', 'e', 'f', 'g', 'h', 'j', 'k', 'm', 
        'n', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 
        'y', 'z'
    };
    
    // 边界值
    private static final double MIN_LAT = -90.0;
    private static final double MAX_LAT = 90.0;
    private static final double MIN_LON = -180.0;
    private static final double MAX_LON = 180.0;
    
    /**
     * 将经纬度转换为Geohash
     * @param latitude 纬度
     * @param longitude 经度
     * @param precision Geohash精度(长度)
     * @return Geohash字符串
     */
    public static String encode(double latitude, double longitude, int precision) {
        if (precision < 1 || precision > 12) {
            throw new IllegalArgumentException("Precision must be between 1 and 12");
        }
        
        double minLat = MIN_LAT;
        double maxLat = MAX_LAT;
        double minLon = MIN_LON;
        double maxLon = MAX_LON;
        
        StringBuilder geohash = new StringBuilder();
        boolean isEven = true;
        int bit = 0;
        int ch = 0;
        
        while (geohash.length() < precision) {
            if (isEven) {
                // 经度位
                double mid = (minLon + maxLon) / 2;
                if (longitude > mid) {
                    ch |= (1 << (4 - bit));
                    minLon = mid;
                } else {
                    maxLon = mid;
                }
            } else {
                // 纬度位
                double mid = (minLat + maxLat) / 2;
                if (latitude > mid) {
                    ch |= (1 << (4 - bit));
                    minLat = mid;
                } else {
                    maxLat = mid;
                }
            }
            
            isEven = !isEven;
            
            if (bit < 4) {
                bit++;
            } else {
                geohash.append(BASE32[ch]);
                bit = 0;
                ch = 0;
            }
        }
        
        return geohash.toString();
    }
    
    /**
     * 从多边形生成Geohash集合
     * @param polygonCoords 多边形坐标点数组，格式为 [lon1, lat1, lon2, lat2, ...]
     * @param precision Geohash精度
     * @param inner 是否只包含完全在多边形内部的Geohash
     * @return Geohash集合
     */
    public static Set<String> generateGeohashesFromPolygon(double[] polygonCoords, int precision, boolean inner) {
        // 这里简化实现，实际应用中应使用空间索引库如JTS或GeoTools
        // 文档中的示例使用了polygon_geohasher.polygon_to_geohashes
        
        // 获取多边形边界
        double minLon = Double.MAX_VALUE;
        double maxLon = Double.MIN_VALUE;
        double minLat = Double.MAX_VALUE;
        double maxLat = Double.MIN_VALUE;
        
        for (int i = 0; i < polygonCoords.length; i += 2) {
            double lon = polygonCoords[i];
            double lat = polygonCoords[i + 1];
            minLon = Math.min(minLon, lon);
            maxLon = Math.max(maxLon, lon);
            minLat = Math.min(minLat, lat);
            maxLat = Math.max(maxLat, lat);
        }
        
        // 生成边界框内的Geohash
        Set<String> geohashes = new HashSet<>();
        
        // 步长根据精度调整
        double step = 0.01; // 简化处理，实际应根据精度计算
        
        for (double lat = minLat; lat <= maxLat; lat += step) {
            for (double lon = minLon; lon <= maxLon; lon += step) {
                // 这里应检查点是否在多边形内，简化处理
                if (isPointInPolygon(lon, lat, polygonCoords)) {
                    geohashes.add(encode(lat, lon, precision));
                }
            }
        }
        
        return geohashes;
    }
    
    /**
     * 检查点是否在多边形内（射线法）
     * @param lon 经度
     * @param lat 纬度
     * @param polygonCoords 多边形坐标点数组
     * @return 是否在多边形内
     */
    private static boolean isPointInPolygon(double lon, double lat, double[] polygonCoords) {
        // 简化实现，实际应用中应使用空间索引库
        // 这里使用射线法简单实现
        boolean inside = false;
        int n = polygonCoords.length / 2;
        
        for (int i = 0, j = n - 1; i < n; j = i++) {
            double lon1 = polygonCoords[2 * i];
            double lat1 = polygonCoords[2 * i + 1];
            double lon2 = polygonCoords[2 * j];
            double lat2 = polygonCoords[2 * j + 1];
            
            if (((lat1 > lat) != (lat2 > lat)) &&
                (lon < (lon2 - lon1) * (lat - lat1) / (lat2 - lat1) + lon1)) {
                inside = !inside;
            }
        }
        
        return inside;
    }
    
    public static void main(String[] args) {
        // 测试文档中的示例
        
        // 示例1: 将经纬度转换为Geohash
        double latitude = 41.67592880570442;
        double longitude = -88.22664972354328;
        int precision = 7;
        
        String geoHash = encode(latitude, longitude, precision);
        System.out.println("Geohash for (" + latitude + ", " + longitude + "): " + geoHash);
        
        // 示例2: 从多边形生成Geohash
        // 使用文档中的多边形坐标(简化处理，只取部分点)
        double[] polygonCoordinates = {
            -73.99360656738281, 40.804595947265625,
            -73.99223327636719, 40.79498291015625,
            -73.99223327636719, 40.792236328125,
            -74.00047302246094, 40.78125,
            -74.00253295898438, 40.78056335449219,
            -74.00321960449219, 40.77850341796875,
            -74.00802612304688, 40.77507019042969,
            -74.0093994140625, 40.77095031738281,
            -74.01626586914062, 40.76271057128906,
            -74.01695251464844, 40.757904052734375,
            -74.02107238769531, 40.75653076171875,
            -74.02107238769531, 40.749664306640625,
            -74.02107238769531, 40.7427978515625,
            -74.02450561523438, 40.73799133300781,
            -74.02519226074219, 40.733184814453125,
            -74.02725219726562, 40.73249816894531,
            -74.02450561523438, 40.72837829589844,
            -74.02999877929688, 40.71739196777344,
            -74.03205871582031, 40.711212158203125,
            -74.03343200683594, 40.704345703125,
            -74.04373168945312, 40.70365905761719,
            -74.04579162597656, 40.700225830078125,
            -74.05265808105469, 40.69610595703125,
            -74.05471801757812, 40.69267272949219,
            -74.05540466308594, 40.69061279296875,
            -74.06021118164062, 40.69129943847656,
            -74.06570434570312, 40.69404602050781,
            -74.06845092773438, 40.69404602050781,
            -74.07463073730469, 40.69610595703125,
            -74.07806396484375, 40.69404602050781,
            -74.07875061035156, 40.69061279296875,
            -74.08355712890625, 40.68992614746094,
            -74.0863037109375, 40.68855285644531,
            -74.08561706542969, 40.693359375,
            -74.08699035644531, 40.6988525390625,
            -74.08287048339844, 40.704345703125,
            -74.0863037109375, 40.70503234863281,
            -74.08561706542969, 40.70709228515625,
            -74.08218383789062, 40.70915222167969,
            -74.08493041992188, 40.71327209472656,
            -74.08287048339844, 40.71807861328125,
            -74.08493041992188, 40.71876525878906,
            -74.08424377441406, 40.7208251953125,
            -74.091796875, 40.71601867675781,
            -74.09042358398438, 40.71327209472656,
            -74.09317016601562, 40.71327209472656,
            -74.09454345703125, 40.71327209472656,
            -74.09523010253906, 40.71533203125,
            -74.0972900390625, 40.71601867675781,
            -74.09797668457031, 40.7208251953125,
            -74.10072326660156, 40.726318359375,
            -74.102783203125, 40.72563171386719,
            -74.10346984863281, 40.7208251953125,
            -74.1082763671875, 40.72288513183594,
            -74.11102294921875, 40.72288513183594,
            -74.11720275878906, 40.719451904296875,
            -74.12063598632812, 40.72151184082031,
            -74.11788940429688, 40.72563171386719,
            -74.1192626953125, 40.72975158691406,
            -74.11857604980469, 40.733184814453125,
            -74.11651611328125, 40.73387145996094,
            -74.11720275878906, 40.7373046875,
            -74.11582946777344, 40.74554443359375,
            -74.12200927734375, 40.74760437011719,
            -74.12132263183594, 40.752410888671875,
            -74.11651611328125, 40.75172424316406,
            -74.11376953125, 40.75172424316406,
            -74.11102294921875, 40.75309753417969,
            -74.12132263183594, 40.760650634765625,
            -74.12612915039062, 40.76271057128906,
            -74.12681579589844, 40.7647705078125,
            -74.12887573242188, 40.76545715332031,
            -74.12818908691406, 40.770263671875,
            -74.12544250488281, 40.771636962890625,
            -74.12406921386719, 40.768890380859375,
            -74.11788940429688, 40.76683044433594,
            -74.11720275878906, 40.7647705078125,
            -74.10346984863281, 40.7537841796875,
            -74.09934997558594, 40.755157470703125,
            -74.0972900390625, 40.75447082519531,
            -74.09591674804688, 40.75035095214844,
            -74.09385681152344, 40.746917724609375,
            -74.08767700195312, 40.74623107910156,
            -74.08493041992188, 40.74485778808594,
            -74.07806396484375, 40.74485778808594,
            -74.07669067382812, 40.74485778808594,
            -74.07600402832031, 40.749664306640625,
            -74.07188415527344, 40.75103759765625,
            -74.06776428222656, 40.749664306640625,
            -74.06776428222656, 40.755157470703125,
            -74.07051086425781, 40.76202392578125,
            -74.07257080078125, 40.76133728027344,
            -74.07325744628906, 40.75927734375,
            -74.07463073730469, 40.76202392578125,
            -74.07806396484375, 40.76133728027344,
            -74.07875061035156, 40.75927734375,
            -74.08493041992188, 40.76271057128906,
            -74.08424377441406, 40.7647705078125,
            -74.08218383789062, 40.76408386230469,
            -74.08355712890625, 40.76820373535156,
            -74.08287048339844, 40.770263671875,
            -74.08493041992188, 40.77369689941406,
            -74.080810546875, 40.77644348144531,
            -74.08355712890625, 40.78193664550781,
            -74.080810546875, 40.78193664550781,
            -74.0753173828125, 40.78193664550781,
            -74.07325744628906, 40.785369873046875,
            -74.07188415527344, 40.782623291015625,
            -74.06913757324219, 40.78399658203125,
            -74.06776428222656, 40.78125,
            -74.06570434570312, 40.78193664550781,
            -74.06639099121094, 40.785369873046875,
            -74.06845092773438, 40.78605651855469,
            -74.0643310546875, 40.78605651855469,
            -74.05952453613281, 40.78399658203125,
            -74.05746459960938, 40.78742980957031,
            -74.05815124511719, 40.790863037109375,
            -74.04853820800781, 40.7867431640625,
            -74.04716491699219, 40.78948974609375,
            -74.04373168945312, 40.79017639160156,
            -74.04579162597656, 40.785369873046875,
            -74.03892517089844, 40.788116455078125,
            -74.03755187988281, 40.790863037109375};
            //  极简实现，实际应用中应使用空间索引库如JTS或GeoTools
            // 这里只是示例，实际生成结果可能与Python库不同
            Set<String> geohashesInside = generateGeohashesFromPolygon(polygonCoordinates, precision, true);
            System.out.println("Geohashes inside the polygon: " + geohashesInside.size());
            
            // 验证文档中的部分Geohash是否在结果中
            String[] sampleGeohashes = {"dr5rdn9", "dr5rg3k", "dr5rfm3", "dr5rddn", "dr7250n"};
            System.out.println("Checking sample geohashes:");
            for (String hash : sampleGeohashes) {
                System.out.println(hash + " exists: " + geohashesInside.contains(hash));
            }
        }
    }